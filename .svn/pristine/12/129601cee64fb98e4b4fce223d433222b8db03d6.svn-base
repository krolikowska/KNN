using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KNN
{
    class Program
    {
        static void Main(string[] args)
        {
            //List<Tuple> sampleA = new List<Tuple>();
            //List<Tuple> sampleB = new List<Tuple>();
            //List<Tuple> sampleC = new List<Tuple>();

          //  DataManager dmIris = new DataManager("../../wine.csv");
            //DataManager dmWine = new DataManager("../../wine.csv");

            Knn knn = new Knn("../../iris.csv");

            knn.CrossTest(10, new Knn.Distance(knn.GetManhattanDistance));

            //List<Tuple> train = knn.Dm.SampleA;
            //train.AddRange(knn.Dm.SampleB);
            //knn.KnnClassyfication(train, knn.Dm.SampleC,3, new Knn.Distance(knn.GetChebyshevDistance));
            //Console.Write("{0:0%}, {1}", knn.Accuracy(knn.Dm.SampleC), knn.Accuracy(knn.Dm.SampleC));

            //double[] errors = knn.ComputeErrors(knn.Dm.SampleC, 1);
            //double[] errors1 = knn.ComputeErrors(knn.Dm.SampleC, 2);
            //            double[] errors2 = knn.ComputeErrors(knn.Dm.SampleC, 3);

            //List<Tuple> train1 = knn.Dm.SampleA;
            //train1.AddRange(knn.Dm.SampleC);
            //knn.KnnClassyfication(train1, knn.Dm.SampleB, 3, new Knn.Distance(knn.GetChebyshevDistance));
            //Console.Write("{0:0%}, {1}", knn.Accuracy(knn.Dm.SampleC), knn.Accuracy(knn.Dm.SampleC));

            //double[] errors3 = knn.ComputeErrors(knn.Dm.SampleB, 1);
            //double[] errors4 = knn.ComputeErrors(knn.Dm.SampleB, 2);
            //double[] errors5 = knn.ComputeErrors(knn.Dm.SampleB, 3);

            //  Console.WriteLine(knn.K);

            //knn.GetManhattanDistace();
            //knn.K = 2;
            //   Console.WriteLine(knn.K);

            //  List<Tuple> allSamples = dmWine.ReadFromFile(dmWine.Path);
            //  Console.WriteLine("ilosc probek {0}", allSamples.Count);
            // dmIris.PrepareTestSamples();


            Console.WriteLine("sampleA");
            //foreach (var x in dmIris.SampleA)
            //{
            //    //Console.WriteLine("indx {0}, wart{1} - wart{2}", x.ClassIndex, x.AttributesData[0], x.AttributesData[12]);
            //var s = (from a in dmIris.SampleA
            //         where a.ClassIndex == 1
            //         select a).Count();
            //Console.WriteLine(s);
            ////    //Console.WriteLine(dmWine.SampleA.Count);
            ////}
            //Console.WriteLine("sampleB");

            ////foreach (var x in dmIris.SampleB)
            ////{
            ////    //Console.WriteLine("indx {0}, wart{1} - wart{2}", x.ClassIndex, x.AttributesData[0], x.AttributesData[12]);
            ////    //Console.WriteLine(dmWine.SampleB.Count);
            //var s2 = (from a in dmIris.SampleB
            //         where a.ClassIndex == 1
            //         select a).Count();
            //Console.WriteLine(s2);
            ////}
            //Console.WriteLine("sampleC");

            ////foreach (var x in dmIris.SampleC)
            ////{
            ////    //Console.WriteLine("indx {0}, wart{1} - wart{2}", x.ClassIndex, x.AttributesData[0], x.AttributesData[12]);
            ////    //Console.WriteLine(dmWine.SampleC.Count);
            //var s1 = (from a in dmIris.SampleC
            //         where a.ClassIndex == 1
            //         select a).Count();
            //Console.WriteLine(s1);
            ////}
            Console.ReadKey();
        }
    }
}
