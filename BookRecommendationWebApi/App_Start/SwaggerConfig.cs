using System.Globalization;
using System.Linq;
using System.Web.Http;
using System.Web.Http.Description;
using Swashbuckle.Application;
using Swashbuckle.Swagger;
using WebActivatorEx;
using BookRecommendationWebApi;

[assembly: PreApplicationStartMethod(typeof(SwaggerConfig), "Register")]

namespace BookRecommendationWebApi
{
    public class SwaggerConfig
    {
        public static void Register()
        {
            var thisAssembly = typeof(SwaggerConfig).Assembly;

            GlobalConfiguration.Configuration
                               .EnableSwagger(c =>
                                              {

                                                  c.SingleApiVersion("v1", "RecommendationApi");


                                                  // If you annotate Controllers and API Types with
                                                  // Xml comments (http://msdn.microsoft.com/en-us/library/b2s063f7(v=vs.110).aspx), you can incorporate
                                                  // those comments into the generated docs and UI. You can enable this by providing the path to one or
                                                  // more Xml comment files.
                                                  //
                                                  // c.IncludeXmlComments(GetXmlCommentsPath());

                                                  //
                                                  // Use the "MapType" option to override the Schema generation for a specific type.
                                                  // It should be noted that the resulting Schema will be placed "inline" for any applicable Operations.
                                                  // While Swagger 2.0 supports inline definitions for "all" Schema types, the swagger-ui tool does not.
                                                  // It expects "complex" Schemas to be defined separately and referenced. For this reason, you should only
                                                  // use the "MapType" option when the resulting Schema is a primitive or array type. If you need to alter a
                                                  // complex Schema, use a Schema filter.
                                                  //
                                                  //c.MapType<ProductType>(() => new Schema { type = "integer", format = "int32" });


                                                  // In accordance with the built in JsonSerializer, Swashbuckle will, by default, describe enums as integers.
                                                  // You can change the serializer behavior by configuring the StringToEnumConverter globally or for a given
                                                  // enum type. Swashbuckle will honor this change out-of-the-box. However, if you use a different
                                                  // approach to serialize enums as strings, you can also force Swashbuckle to describe them as strings.
                                                  // 
                                                  c.DescribeAllEnumsAsStrings();

                                                  // Post-modify Operation descriptions once they've been generated by wiring up one or more
                                                  // Operation filters.
                                                  //
                                                  //c.OperationFilter<AddDefaultResponse>();
                                                  //


                                                  // In contrast to WebApi, Swagger 2.0 does not include the query string component when mapping a URL

                                                  // to an action. As a result, Swashbuckle will raise an exception if it encounters multiple actions
                                                  // with the same path (sans query string) and HTTP method. You can workaround this by providing a
                                                  // custom strategy to pick a winner or merge the descriptions for the purposes of the Swagger docs 
                                                  //
                                                  //c.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());


                                              })
                               .EnableSwaggerUi(c => { });

        }
    }

    /// <summary>
    /// If you would prefer to control the Swagger Operation ID
    /// values globally, uncomment this class, as well as the 
    /// call above that wires this Operation Filter into 
    /// the pipeline.
    /// </summary>
    /*
    internal class IncludeParameterNamesInOperationIdFilter : IOperationFilter
    {
        public void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription)
        {
            if (operation.parameters != null)
            {
                // Select the capitalized parameter names
                var parameters = operation.parameters.Select(
                    p => CultureInfo.InvariantCulture.TextInfo.ToTitleCase(p.name));

                // Set the operation id to match the format "OperationByParam1AndParam2"
                operation.operationId = $"{operation.operationId}By{string.Join("And", parameters)}";
            }
        }
    }
    */
}